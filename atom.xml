<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Me:ICanWriteCode]]></title>
  <link href="http://prashantvc.github.com/atom.xml" rel="self"/>
  <link href="http://prashantvc.github.com/"/>
  <updated>2013-03-07T17:45:44+05:30</updated>
  <id>http://prashantvc.github.com/</id>
  <author>
    <name><![CDATA[Prashant Cholachagudda]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Where.FirstOrDefault vs FirstOrDefault]]></title>
    <link href="http://prashantvc.github.com/blog/2013/03/07/where-dot-firstordefaulr-vs-firstordefault/"/>
    <updated>2013-03-07T17:39:00+05:30</updated>
    <id>http://prashantvc.github.com/blog/2013/03/07/where-dot-firstordefaulr-vs-firstordefault</id>
    <content type="html"><![CDATA[<p>Use of 1. <code>Where(predicate).FirstOrDefault</code> vs. 2. <code>FirstOrDefault(predicate)</code> came up quite a lot during the recent code reviews. While both yields same result most of the team members preferred using option 2.</p>

<p>I thought <code>FirstOrDefault</code> would execute faster than <code>Where.FirstOrDefault</code>, because the LINQ doesn&#8217;t need to filter the collection before it calls the <code>FirstOrDefault</code>, and I was <strong>wrong!</strong>.</p>

<p>The <a href="https://www.simple-talk.com/dotnet/.net-framework/linq-secrets-revealed-chaining-and-debugging/" title="LINQ Secrets Revealed: Chaining and Debugging">chaining behaviour</a> of Linq to objects makes sure that collections iterated lazily, so both <code>Where(predicate).FirstOrDefault</code> and <code>FirstOrDefault(predicate)</code> methods won&#8217;t go further if the first item is hit.</p>

<p>Consider this code snippet,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">items</span> <span class="p">=</span> <span class="k">new</span><span class="p">[]</span> <span class="p">{</span> <span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="m">4</span><span class="p">,</span> <span class="m">5</span><span class="p">,</span> <span class="m">2</span> <span class="p">};</span>
</span><span class='line'><span class="n">Func</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">bool</span><span class="p">&gt;</span> <span class="n">predicate</span> <span class="p">=</span> <span class="k">delegate</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">i</span> <span class="p">==</span> <span class="m">2</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Prints: 1 2</span>
</span><span class='line'><span class="n">items</span><span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">predicate</span><span class="p">).</span><span class="n">FirstOrDefault</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Prints: 1 2    </span>
</span><span class='line'><span class="n">items</span><span class="p">.</span><span class="n">FirstOrDefault</span><span class="p">(</span><span class="n">predicate</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>I expected the <code>items.Where(predicate).FirstOrDefault()</code> would print all the items in the sequence, but it did not, it returned after printing <code>1 2</code>. So, in the end it doesn&#8217;t matter what method you use the result and execution will be same and any performance difference are highly insignificant.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Monotouch: UIView to Image]]></title>
    <link href="http://prashantvc.github.com/blog/2013/02/25/monotouch-uiview-to-image/"/>
    <updated>2013-02-25T22:49:00+05:30</updated>
    <id>http://prashantvc.github.com/blog/2013/02/25/monotouch-uiview-to-image</id>
    <content type="html"><![CDATA[<p>I wrote this code snippet quite a while ago to make it easy to print a
UIView from a iOS device. Hope it helps you too.</p>

<figure class='code'><figcaption><span>UIViewToImage.cs</span><a href='https://gist.github.com/prashantvc/4657263/raw/a64b8a821b860201e0420c3e735326f80063386a/UIViewToImage.cs'>View Raw</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">Extensions</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="n">UIImage</span> <span class="nf">ToImage</span> <span class="p">(</span><span class="k">this</span> <span class="n">UIView</span> <span class="n">view</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">RectangleF</span> <span class="n">canvasRect</span> <span class="p">=</span> <span class="n">view</span><span class="p">.</span><span class="n">Bounds</span><span class="p">;</span>
</span><span class='line'>        <span class="n">UIGraphics</span><span class="p">.</span><span class="n">BeginImageContextWithOptions</span> <span class="p">(</span><span class="n">canvasRect</span><span class="p">.</span><span class="n">Size</span><span class="p">,</span> <span class="k">false</span><span class="p">,</span> <span class="m">0.0f</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">CGContext</span> <span class="n">ctx</span> <span class="p">=</span> <span class="n">UIGraphics</span><span class="p">.</span><span class="n">GetCurrentContext</span> <span class="p">();</span>
</span><span class='line'>        <span class="n">ctx</span><span class="p">.</span><span class="n">FillRect</span> <span class="p">(</span><span class="n">canvasRect</span><span class="p">);</span>
</span><span class='line'>        <span class="n">view</span><span class="p">.</span><span class="n">Layer</span><span class="p">.</span><span class="n">RenderInContext</span> <span class="p">(</span><span class="n">ctx</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">UIImage</span> <span class="n">newImage</span> <span class="p">=</span> <span class="n">UIGraphics</span><span class="p">.</span><span class="n">GetImageFromCurrentImageContext</span> <span class="p">();</span>
</span><span class='line'>        <span class="n">UIGraphics</span><span class="p">.</span><span class="n">EndImageContext</span> <span class="p">();</span>
</span><span class='line'>        <span class="n">NSData</span> <span class="n">imgData</span> <span class="p">=</span> <span class="n">newImage</span><span class="p">.</span><span class="n">AsPNG</span> <span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">UIImage</span><span class="p">.</span><span class="n">LoadFromData</span> <span class="p">(</span><span class="n">imgData</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://prashantvc.github.com/blog/2013/02/25/hello-world/"/>
    <updated>2013-02-25T22:10:00+05:30</updated>
    <id>http://prashantvc.github.com/blog/2013/02/25/hello-world</id>
    <content type="html"><![CDATA[<p>I have moved my <a href="http://prashantvc.wordpress.com">blog</a> from Wordpress! Yey!</p>
]]></content>
  </entry>
  
</feed>
